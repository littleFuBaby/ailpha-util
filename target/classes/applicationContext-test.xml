<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/task
        http://www.springframework.org/schema/task/spring-task.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">

	<!-- This part is used to learn and test configuration file of instance -->
	<!-- test AOP -->
	<!-- <aop:config>
		<aop:pointcut expression="execution(public * org.fuys.own..*.*(..))" id="defaultPointcut"/>
		<aop:aspect ref="AOPProxy">
			<aop:before method="sayHiBeforeWithArg" pointcut="execution(public * org.fuys.own..*.*(..)) and args(id)" arg-names="id"/>
			<aop:before method="sayHiBefore" pointcut-ref="defaultPointcut"/>
			<aop:after method="sayGoodByeAfter" pointcut-ref="defaultPointcut"/>
			<aop:after-returning method="sayGoodBysAfterReturning" pointcut-ref="defaultPointcut" returning="v" arg-names="v"/>
			<aop:after-throwing method="sayAfterthrowing" pointcut-ref="defaultPointcut" throwing="e" arg-names="e"/>
			<aop:around method="arroundAdvice" pointcut-ref="defaultPointcut"/>
		</aop:aspect>
	</aop:config> -->
	
	<!-- test spring task -->
	<!-- 间隔执行和Cron表达式 -->
	<!-- <bean id="springTask" class="SpringTaskDemo"/>
	<task:scheduled-tasks>
		<task:scheduled ref="springTask" method="executeTask" fixed-delay="3000"/>
		<task:scheduled ref="springTask" method="executeTask" cron="0/8 * * * * ?"/>
	</task:scheduled-tasks> -->
	
	<!-- test Quartz -->
	<bean id="jobFactory" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
		<property name="jobClass" value="com.ailpha.test.QuartzJob"/>
		<property name="jobDataMap">
			<map>
				<entry key="timeout" value="0"/>
			</map>
		</property>
	</bean>
	<bean id="methodInvokingJobFactory" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject">
			<bean class="com.ailpha.test.TimerDemo"/>
		</property>
		<property name="targetMethod" value="executeTimer"/>
	</bean>
	
	<bean id="jobTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean">
		<property name="jobDetail" ref="jobFactory"/>
		<property name="startDelay" value="1"/>
		<property name="repeatInterval" value="7000"/>
	</bean>
	<bean id="cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="jobFactory"/>
		<property name="cronExpression" value="0/30 * * * * ?"/>
	</bean>
	<bean id="cronTriggerForMethodInvoking" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="methodInvokingJobFactory"/>
		<property name="cronExpression" value="0/18 * * * * ?"/>
	</bean>
	<bean id="schedulerFactory" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<array>
				<!-- <ref bean="jobTrigger"/>
				<ref bean="cronTrigger"/>
				<ref bean="cronTriggerForMethodInvoking"/> -->
			</array>
		</property>
	</bean>
	
	<!-- inject Resource interface -->
	<bean id="springResourceTest" class="com.ailpha.test.SpringResourceTest">
		<property name="resource" value="classpath:log4j.properties"/>
		<property name="resources">
			<array>
				<!-- <value>http://www.springframework.org/schema/beans/spring-beans.xsd</value>
				<value>classpath:applicationContext.xml</value> -->
				<value>classpath:**/license.txt</value>
				<value>classpath:org/**/*.xml</value>
			</array>
		</property>
	</bean>
		
	<!-- collection DI instance -->
	<bean id="goods" class="com.ailpha.vo.Goods">
		<property name="name" value="iphone x"/>
		<property name="information">
			<map>
				<entry>
					<key><value>producer</value></key>
					<value>GuangZhou factory</value>
				</entry>
			</map>
		</property>
		<property name="properties">
			<props>
				<prop key="price">7999.00</prop>
			</props>
		</property>
	</bean>
	
	<!-- p name space instance -->
	<bean id="order" class="com.ailpha.vo.Order" p:orderId="***" p:user-ref="user"/>
	
	<!-- test DI instance including reference transmission -->
	<bean id="user" class="com.ailpha.vo.User">
		<constructor-arg index="0" value="andy"/>
		<constructor-arg index="1" ref="province"/>
	</bean>
	<bean id="province" class="com.ailpha.vo.Province">
		<property name="name" value="GuiZhou"/>
		<property name="country" ref="country"/>
	</bean>
	<bean id="country" class="com.ailpha.vo.Country">
		<property name="name">
			<value>china</value>
		</property>
	</bean>
</beans>